---
import { toHTML } from '@portabletext/to-html';
import { urlFor } from '../../../queries/sanity';
import { DateTime } from 'luxon';

import Hero from '../../../components/widgets/Hero.astro';
import Layout from '../../../layouts/PageLayout.astro';
import { getRelatedEvents } from '../../../queries/Events';
import { fetchOne, fetchShowInfo, fetchSlugs } from '../../../queries/TheatreSeasons';
import SanityImage from '../../../components/common/SanityImage.astro';

export async function getStaticPaths() {
  const seasons = await fetchSlugs();
  const paths = seasons.flatMap((season) => season.shows.map((show) => ({ params: { season: season.slug, show } })));
  return paths;
}
export interface Props {
  season: string;
  show: string;
}
const { season, show } = Astro.params;
const showInfo = await fetchShowInfo({ slug: show });
const seasonInfo = await fetchOne({ season });
const events = await getRelatedEvents({ show });
const metadata = {
  title: `${showInfo.title} | ${seasonInfo.title} | TCHA`,
};
function formatDate(date: DateTime): string {
  return date.toLocaleString(DateTime.DATE_MED_WITH_WEEKDAY);
}
---

<Layout metadata={metadata}>
  {/* Hero Widget */}
  <Hero tagline={'Theatre Season: ' + seasonInfo.title}>
    <Fragment slot="image">
      <SanityImage image={showInfo.hero} className="h-full w-full object-cover" />
    </Fragment>
    <Fragment slot="title">{showInfo.title}</Fragment>

    <Fragment slot="subtitle">
      {formatDate(showInfo.date_range.start)} - {formatDate(showInfo.date_range.end)}
    </Fragment>
    {
      events.length > 0 && events[0].ticket_link && (
        <Fragment slot="content">
          <a
            class="btn-secondary"
            class="m-4 inline-flex items-center gap-x-1 rounded-lg bg-secondary px-3 py-2 text-center text-xs font-medium text-primary hover:bg-darkMode hover:text-white focus:bg-darkMode focus:text-white focus:outline-none dark:hover:bg-primary"
            href={events[0].ticket_link}
          >
            Get Tickets
          </a>
        </Fragment>
      )
    }
  </Hero>
  <section class="mx-auto max-w-4xl px-6 pb-12 sm:px-6 sm:pb-16 lg:pb-20">
    <h3 id="synopsis" class="text-m my-2 font-bold dark:text-slate-300 sm:text-xl">Synopsis</h3>
    <p class="my-2" set:html={toHTML(showInfo.description)} />
    {
      showInfo.participation_is_open && showInfo.participation && (
        <>
          <h3 class="text-m my-2 font-bold dark:text-slate-300 sm:text-xl">Auditions</h3>
          <p class="my-2" set:html={toHTML(showInfo.participation.details)} />
          <a class="btn-secondary mt-4" target="_blank" href={showInfo.participation.registration_link}>
            Audition Information
          </a>
        </>
      )
    }
    {
      showInfo.gallery?.images?.length > 0 && (
        <div id="gallery" class="container mx-auto my-8 sm:columns-2 md:columns-3 lg:columns-4 xl:columns-5">
          {showInfo.gallery?.images.map((image) => (
            <>
              <a
                href={urlFor(image).url()}
                data-pswp-width={image.asset.metadata.dimensions.width}
                data-pswp-height={image.asset.metadata.dimensions.height}
                target="_blank"
              >
                <SanityImage image={image} className="mb-4" />
              </a>
            </>
          ))}
        </div>
      )
    }
    <script>
      import PhotoSwipeLightbox from 'photoswipe/lightbox';
      import 'photoswipe/style.css';

      let lightbox: PhotoSwipeLightbox;

      document.addEventListener('astro:page-load', () => {
        lightbox = new PhotoSwipeLightbox({
          gallery: '#gallery',
          children: 'a',
          pswpModule: () => import('photoswipe'),
        });

        lightbox.init();
      });

      document.addEventListener('astro:before-swap', () => {
        lightbox.destroy();
      });
    </script>
  </section>
</Layout>
