---
import { SanityImage as NpmSanityImage, type WrapperProps } from 'sanity-image';
import { SANITY } from '~/utils/config';
import type { StandardImageAsset } from '~/types';

export interface Props extends Omit<WrapperProps<'img'>, 'id' | 'preview'> {
  image: StandardImageAsset;
  preview?: boolean;
}

const { image, preview = true, ...rest } = Astro.props as Props;
const { style = {}, mode = 'cover' } = rest;
const styleString = Object.entries(style)
  .map(([key, value]) => {
    const kebabKey = key.replace(/([A-Z])/g, '-$1').toLowerCase(); // Convert camelCase to kebab-case
    return `${kebabKey}: ${value};`;
  })
  .join(' ');
---

<NpmSanityImage
  alt={image.alt}
  {...rest}
  id={image.asset._id}
  projectId={SANITY.projectId}
  dataset={SANITY.dataset}
  mode={mode}
  hotspot={image.hotspot}
  crop={image.crop}
  preview={preview ? image.asset.metadata.lqip : undefined}
  data-onloadstyle={styleString}
/>

<script>
  (() => {
    const win = window as typeof window & { __sanityImageLqipInit?: boolean };
    if (win.__sanityImageLqipInit) return;
    win.__sanityImageLqipInit = true;

    function swapImagePreview(src: Element | Event) {
      const img = src instanceof Event ? (src.target as HTMLImageElement) : (src as HTMLImageElement);
      const onLoadStyle = img.getAttribute('data-onLoadStyle');
      if (onLoadStyle !== null) {
        if (onLoadStyle.trim().length > 0) {
          img.setAttribute('style', onLoadStyle);
        } else {
          img.removeAttribute('style');
        }
        img.removeAttribute('data-onLoadStyle');
      }
      img.removeAttribute('data-loading');
      const lqip = img.previousElementSibling as HTMLImageElement | null;
      if (lqip && lqip.tagName === 'IMG' && lqip.hasAttribute('data-lqip')) {
        lqip.replaceWith(img);
      }
      img.removeEventListener('load', swapImagePreview);
    }

    const hydrateImages = () => {
      document.querySelectorAll<HTMLImageElement>('img[data-loading]').forEach((img) => {
        if (img.complete) {
          swapImagePreview(img);
        } else {
          img.addEventListener('load', swapImagePreview, { once: true });
        }
      });
    };

    document.addEventListener('astro:page-load', hydrateImages);
    document.addEventListener('astro:after-swap', hydrateImages);

    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      requestAnimationFrame(hydrateImages);
    } else {
      document.addEventListener('DOMContentLoaded', hydrateImages, { once: true });
    }
  })();
</script>
