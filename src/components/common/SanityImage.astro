---
import { SanityImage as NpmSanityImage, type WrapperProps } from 'sanity-image';
import { SANITY } from '../../utils/config';
import type { StandardImageAsset } from '../../types';

export interface Props extends Omit<WrapperProps<'img'>, 'id' | 'preview'> {
  image: StandardImageAsset;
  preview?: boolean;
}

const { image, preview = true, ...props } = Astro.props;
const { style = {} } = props;
const styleString = Object.entries(style)
  .map(([key, value]) => {
    const kebabKey = key.replace(/([A-Z])/g, '-$1').toLowerCase(); // Convert camelCase to kebab-case
    return `${kebabKey}: ${value};`;
  })
  .join(' ');
---

<NpmSanityImage
  alt={image.alt}
  {...props}
  id={image.asset._id}
  projectId={SANITY.projectId}
  dataset={SANITY.dataset}
  mode="cover"
  hotspot={image.hotspot}
  crop={image.crop}
  preview={preview ? image.asset.metadata.lqip : undefined}
  data-onloadstyle={styleString}
/>

<script>
  function swapImagePreview(src: Element | Event) {
    let img = src instanceof Event ? (src.target as HTMLImageElement) : src;
    img.setAttribute('style', img.getAttribute('data-onLoadStyle'));
    img.removeAttribute('data-onLoadStyle');
    img.removeAttribute('data-loading');
    const lqip = img.previousElementSibling as HTMLImageElement;
    if (lqip.tagName === 'IMG' && lqip.hasAttribute('data-lqip')) {
      lqip.replaceWith(img);
    }
    img.removeEventListener('load', swapImagePreview);
  }
  document.addEventListener('astro:page-load', () => {
    document.querySelectorAll<HTMLImageElement>('img[data-loading]').forEach((img) => {
      if (img.complete) {
        swapImagePreview(img);
      } else {
        img.addEventListener('load', swapImagePreview);
      }
    });
  });
</script>
