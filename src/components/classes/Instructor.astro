---
import { toHTML } from '@portabletext/to-html';
import imageUrlBuilder from '@sanity/image-url';
import type { SanityImageSource } from '@sanity/image-url/lib/types/types';
import { sanityClient } from 'sanity:client';

import type { Instructor } from '@schema/Instructor';

export interface Props {
  instructor: Instructor;
}
const { instructor } = Astro.props;

const builder = imageUrlBuilder(sanityClient);

const urlFor = (source: SanityImageSource) => {
  return builder.image(source);
};
---

<div
  id={'instructor-' + instructor._id}
  class="fixed top-0 right-0 z-40 h-screen p-4 overflow-y-auto transition-transform translate-x-full bg-white w-80 dark:bg-gray-800"
  tabindex="-1"
  aria-labelledby="drawer-right-label"
>
  <img src={urlFor(instructor.headshot).maxWidth(80).url()} class="h-auto max-w-full" alt={instructor.name} />
  <h5
    id="drawer-right-label"
    class="inline-flex items-center mb-4 text-base font-semibold text-gray-500 dark:text-gray-400"
  >
    {instructor.name}
  </h5>
  <button
    type="button"
    data-drawer-hide={'instructor-' + instructor._id}
    aria-controls={'instructor-' + instructor._id}
    class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 absolute top-2.5 end-2.5 inline-flex items-center justify-center dark:hover:bg-gray-600 dark:hover:text-white"
  >
    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
      <path
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
    </svg>
    <span class="sr-only">Close drawer</span>
  </button>
  <div
    class="flex flex-col gap-2"
    set:html={instructor.class_type_bio ? toHTML(instructor.class_type_bio) : instructor.bio}
  />
</div>
